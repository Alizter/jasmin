fn rand_u64(reg u64) -> reg u64 = python rand_u64;
fn assert_equal_u64(reg u64, reg u64) = python assert_equal_u64;

/*
void gfe4x_from_gfe(gfe4x *y,const gfe *x) 
{
  int i;

  for (i = 0;i < 5;++i) {
    0[(crypto_uint64 *) &y->v[i]] = x[0].v[i];
    1[(crypto_uint64 *) &y->v[i]] = x[1].v[i];
    2[(crypto_uint64 *) &y->v[i]] = x[2].v[i];
    3[(crypto_uint64 *) &y->v[i]] = x[3].v[i];
  }
}

void gfe4x_to_gfe(const gfe4x *y,gfe *x) 
{
  int i;

  for (i = 0;i < 5;++i) {
    x[0].v[i] = 0[(crypto_uint64 *) &y->v[i]];
    x[1].v[i] = 1[(crypto_uint64 *) &y->v[i]];
    x[2].v[i] = 2[(crypto_uint64 *) &y->v[i]];
    x[3].v[i] = 3[(crypto_uint64 *) &y->v[i]];
  }
}
*/

fn gfe_add(x: stack u64[5], y: stack u64[5]) -> stack u64[5]
{
  r         : stack u64[5];
  t         : reg   u64;
  i         : inline u64;

  for i in 0..5
  {
    t = x[i];
    t += y[i];
    r[i] = t;
  }

  return r;
}

fn gfe4x_add(x: stack u64[20], y: stack u64[20]) -> stack u64[20]
{
  r         : stack u64[20];
  t         : reg   u64;
  i         : inline u64;

  for i in 0..20
  {
    t = x[i];
    t += y[i];
    r[i] = t;
  }

  return r;
}



fn gfe4x_from_gfe(x: stack u64[20]) -> stack u64[20]
{
  r         : stack u64[20];
  i         : inline u64;

  for i in 0..5 {
    r[4*i+0] = x[i+0];
    r[4*i+1] = x[i+5];
    r[4*i+2] = x[i+10];
    r[4*i+3] = x[i+15];
  }

  return r;
}

fn gfe4x_to_gfe(x: stack u64[20]) -> stack u64[20]
{
  r         : stack u64[20];
  i         : inline u64;

  for i in 0..4 {
    r[5*i+0] = x[i+0];
    r[5*i+1] = x[i+4];
    r[5*i+2] = x[i+8];
    r[5*i+3] = x[i+12];
    r[5*i+4] = x[i+16];
  }

  return r;
}


fn test() {
  a, b, r0, r1 : stack u64[20];
  av, bv, rv   : stack u64[20];
  s,t          : reg u64;
  i,j          : inline u64;

  d0, d1, d2   : stack u64[5];

  s = 42;

  for i in 0..20 {
    t         = rand_u64(s);
    a[i]      = t;
    s         = s+1;
    t         = rand_u64(s);
    b[i]      = t;
    s         = s+1;
  }

  for j in 0..4 {
    for i in 0..5 {
      d0[i] := a[5*j+i];
      d1[i] := b[5*j+i];
    }
    d2 = gfe_add(d0, d1);
    for i in 0..5 {
      r0[5*j+i] := d2[i];
    }
  }
  
  /* This would be nice like this:
   * for j in 0..4 {
   * r0[5*j:5*j+4] = gfe_add(a[5*j:5*j+4], b[5*j:5*j+4]);
   */
       

  av = gfe4x_from_gfe(a);
  bv = gfe4x_from_gfe(b);

  rv = gfe4x_add(av, bv);
  r1 = gfe4x_to_gfe(rv);

  for i in 0..20 {
    s = r0[i];
    t = r1[i];
    assert_equal_u64(s,t);
  }
}
