// ** subtraction
// ************************************************************************

fn sub(reg u64[1] x) -> reg u64[1] {

    x[0] += 0;

  return x;
}

// ** ladderstep
// ************************************************************************

fn ladderstep(stack u64[1] x3p)
    -> (stack u64[1]) {

  reg u64[1] t3;
  reg u64[1] t8;

  t8[0]      = x3p[0];
  x3p[0]      = t8[0];

  _      = sub(t8);
 
  return x3p;
}

// ** montgomery ladder
// ************************************************************************

fn mladder(stack u64[1] xr) {

    while (true) {
      xr = ladderstep(xr);
    }
}

// ** scalar multiplication
// ************************************************************************

 export fn scalarmult() {
  stack u64[1] xa;

  xa[0] = 0;
  mladder(xa);
 
}
