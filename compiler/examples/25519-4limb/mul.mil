fn mul( reg u64[4] xp, reg u64[4] yp) -> reg u64[4] {
  reg u64[4] zp;
  reg u64[8] z;
  reg u64[4] x;
  reg u64[4] y;
  reg u64 h;
  reg u64 l; 
  reg u64 hprev;
  reg u64 c38;
  reg u64 rax; 
  reg u64 zero;
  reg bool cf;
  inline int i;
  inline int j;

  x[0] = xp[0];
  for j = 1 to 4 {
    y[j] = yp[j];
    h, l = y[j] * x[0];
    if (j == 0) {
      z[0] = l;
      z[1] = h;
    } else {
      cf, z[j] += l;
      z[j+1] = 0;
      _ , z[j+1] += h + cf;
    }
  }

  for i = 1 to 4 {
    x[i] = xp[i];
    for j = 0 to 4 {
      y[j] = yp[j];
      h, l = y[j] * x[i];
      cf, z[i+j] += l;
      if j == 0 {
        hprev = 0;
        _, hprev += h + cf;
      } else {
        _, h += 0 + cf;
        cf, z[i+j] += hprev;
        if 1 <= j && j < 4 - 1 {
          hprev = 0;
          _, hprev += h + cf;
        } else { // j = n - 1 
          z[i+j+1] = 0;
          cf, z[i+j+1] += h + cf;
        }
      }
    }
  }

  // reduction from 8 limbs to 4 limbs 
  c38 = 38;
  for i = 0 to 4 {
    rax = z[4 + i];
    h, l = rax * c38;
    cf, z[i] += l;
    if i == 0 {
      hprev = 0;
      _, hprev += h + cf;
    } else {
      _, h += 0 + cf;
      cf, z[i] += hprev;
      hprev = 0;
      _, hprev += h + cf;
    }
  }

  l = hprev * 38;
  cf, z[0] += l;

  for i = 1 to 4 {
    cf, z[i] += 0 + cf;
  }

  zero = 0;
  _, zero += 0 + cf;

  l = zero * 38;
  z[0] += l;

  for i = 0 to 4 {
    zp[i] = z[i];
  }
  return zp;

}

export
fn main(reg u64 z, reg u64 x, reg u64 y) {
reg u64[4] zp;
reg u64[4] xp;
reg u64[4] yp;
inline int i;

for i = 0 to 4 {
	xp[i] = [x + 8*i];
	yp[i] = [y + 8*i];
}

zp = mul(xp, yp);

for i = 0 to 4 {
	[z + 8*i] = zp[i];
}
}
