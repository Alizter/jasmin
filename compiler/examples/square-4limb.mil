param n;  /* n = limbs - 1 */

/* multiplication of distinct limbs */
x[0] = load xp, 0;
for i in 1 .. n {
  for j in 0 .. n - j {
    x[i + j] = load xp, i + j;
    h l = x[i + j] * x[j];
    if i = 1 {
      r[j + 1] = l;
      r[j + 2] = h;
    } else {
      cf? r[j + i] += l;
      cf? r[j + i + 1] += h + cf;
      if i = 2 {
        r[j + 4] += 0 + cf;
      } else {
  for k in j + i + 2 .. 2*n + 1 {
	  if k = 2*n + 1 {
	    r[2*n + 1] = 0;
	  }
	  r[k] += 0 + cf;
	}
	}
      }
  }
}	  

/* add the duplicated */
r[1] += r[1];	  
for i in 2 .. 2*n {
   cf? r[i] += r[i] + cf;   	
}
r[2*n + 1] += r[ 2*n + 1] + cf;

/* multiplication of the same limbs */      
for i in 0 .. n {
  h l = x[i] * x[i];
  if i = 0 {
    r[0] = l;
    s[1] = h;
  } else { 
    if i < n - 1 {
      s[i + 1] = l;
      s[i + 2] = h;
    } else { 
      if i = n - 2 { 
        cf? r[1] += r[1];
	for j in 1 .. n {
	  cf? r[j] += s[j] + cf;
	 }
	cf? r[n + 1] += l + cf;
	cf? r[n + 2] += h + cf;

	for j in n + 3 .. 2*n {
	  cf? r[j] += 0 + cf;
	 }
	 r[2*n + 1] += 0 + cf;
       } else { 
         cf? r[2*n] += l	
	 cf? r[2*n + 1] += h + cf;
	 }
     }
   } 
}

/*reduction (same as in the multiplication file )*/
for i in 0 ..n { 
  h l = r[n + i + 1] * 38;
  cf? r[i] += l; 
    if i = 0 {
      hprev = 0;
      hprev += h + cf;
    } else  {
      h += 0 + cf;
      cf? r[i] += hprev; 
      hprev = 0;
      hprev += h + cf;
      }
}
h l = hprev * 38 ;
cf? r[0] += l;
cf? r[1] += h + cf
for i in 2 .. n {
  cf? r[i] = 0 + cf;
}

zero = 0;
zero = 0 + cf;

h l = zero * 38 ;
r0 += l;

for j in 0..n {
  store rp, j, r[j];
}
      

