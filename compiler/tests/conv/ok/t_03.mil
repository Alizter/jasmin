fn foo1(x,y : reg u64, c : reg bool) -> reg u64 * reg bool * reg u64 {
  x += y;
  return x,c,y;
}

//fn bar1(x,y : reg u64, c : reg bool) -> reg u64 * reg bool * reg u64 {
//  x -= y;
//  return x,c,y;
//}

fn test() {
  u, v : reg u64;
  cf : reg bool;
  u_, v_ : reg u64;
  cf_ : reg bool;
  i : inline u64;

  u = 0;
  v = 0;
  u_ = u;
  v_ = v;
  cf, u += u;
  cf_ = cf;
  for i in 0..10 {
    while cf {
      if cf {
        u_,cf_,v_ = foo1(u,v,cf);
      } else {
        u_,cf_,v_ = bar1(u,v,cf); 
      }
    }
  }
  //u_,cf_,v_ = bar1(u,v,cf);
  //u_,cf_,v_ = bar1(u,v,cf);
  //u_,cf_,v_ = foo1(u,v,cf);
}

/*
START:CMD
ARG="renumber_fun_unique,save[/tmp/before.mil][],cert_inline[test],save[/tmp/after.mil][]"
#ARG="renumber_fun_unique,inline_cert[test],"
END:CMD
*/
