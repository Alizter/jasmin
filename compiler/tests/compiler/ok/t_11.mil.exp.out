renumbering identifiers in all function(s)
   REMOVED_TIME
type checking module in all function(s)
   REMOVED_TIME
expanding macros in ``test'' function(s)
   REMOVED_TIME
renumbering identifiers in all function(s)
   REMOVED_TIME
>> renum:
extern fn test() {
  cf : reg bool
  ptr : reg u64
  v_0 : stack u64[15]
  v_14 : stack u64[15]
  v_inner : stack u64[15]
  v_inner_inner : stack u64[7]
  v_inner_outer : stack u64[15]
  if cf {
    v_0[0] = 0;
    v_14[14] += 1;
    v_inner[10] = 10;
    v_inner_outer[10] = MEM[ptr + 80];
    v_inner_inner[5] = 5;
    MEM[ptr + 40] = 5;
    v_inner_outer[10] = MEM[ptr + 80];
    v_inner_inner[6] = 6;
    MEM[ptr + 48] = 6;
    v_14[14] += 1;
    v_inner[11] = 11;
    v_inner_outer[11] = MEM[ptr + 88];
    v_inner_inner[5] = 5;
    MEM[ptr + 40] = 5;
    v_inner_outer[11] = MEM[ptr + 88];
    v_inner_inner[6] = 6;
    MEM[ptr + 48] = 6;
    v_14[14] += 1;
    v_inner[12] = 12;
    v_inner_outer[12] = MEM[ptr + 96];
    v_inner_inner[5] = 5;
    MEM[ptr + 40] = 5;
    v_inner_outer[12] = MEM[ptr + 96];
    v_inner_inner[6] = 6;
    MEM[ptr + 48] = 6;
    v_14[14] += 1;
    v_inner[13] = 13;
    v_inner_outer[13] = MEM[ptr + 104];
    v_inner_inner[5] = 5;
    MEM[ptr + 40] = 5;
    v_inner_outer[13] = MEM[ptr + 104];
    v_inner_inner[6] = 6;
    MEM[ptr + 48] = 6;
    v_14[14] += 1;
    v_inner[14] = 14;
    v_inner_outer[14] = MEM[ptr + 112];
    v_inner_inner[5] = 5;
    MEM[ptr + 40] = 5;
    v_inner_outer[14] = MEM[ptr + 112];
    v_inner_inner[6] = 6;
    MEM[ptr + 48] = 6;
  }
}


total transformation time: REMOVED_TIME

total time (with save/print): REMOVED_TIME
