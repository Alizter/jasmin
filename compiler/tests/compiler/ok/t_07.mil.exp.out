inlining all calls in ``foo2'' function(s)
   REMOVED_TIME
renumbering identifiers in all function(s)
   REMOVED_TIME
>> input:
fn foo2(x : stack u64, y : stack u64, cf : reg bool) -> stack u64 {
  cf.1 : reg bool
  w : stack u64
  x.1 : stack u64
  y.1 : stack u64
  z : stack u64
  // STARTBLOCK
  w = x;
  cf, w += x;
  // ENDBLOCK
  // STARTBLOCK
  if !cf {
    // STARTBLOCK
    cf, x += w;
    cf, x += y;
    /* START: inlined call to foo1 */
    x.1 := x;
    y.1 := y;
    cf.1 := cf;
    cf.1, x.1 += y.1 + cf.1;
    // ENDBLOCK
    // STARTBLOCK
    if cf.1 {
      // STARTBLOCK
      cf.1, x.1 += y.1;
      cf.1, x.1 += y.1;
      // ENDBLOCK
    }
    // ENDBLOCK
    // STARTBLOCK
    /* START: inlined call to foo0 */
    z := x.1;
    z += z;
    x.1 := z;
    /* END: inlined call to foo0 */
    x := x.1;
    /* END: inlined call to foo1 */
    // ENDBLOCK
  }
  // ENDBLOCK
  return x;
}


total transformation time: REMOVED_TIME

total time (with save/print): REMOVED_TIME
