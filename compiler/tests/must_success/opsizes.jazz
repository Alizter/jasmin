export
fn parsing_test(reg u64 s, reg u64 u) -> reg u64 {
reg u64 x;
x = s;
x = x + s;
x = x + 64;
x = x + 64s s;
x = x >> u;
x = x >>s 64;
x = x >>64s u;
return x;
}

export
fn reg32_test(reg u32 x) -> reg u32 {
reg u32 y;
y = x;
y += x;
return y;
}

export
fn dead_code(reg u32 x) -> reg u32 {
reg u32 y, z;

/* Should one of these moves be eliminated? */
y = x;
z = y;

return z;
}

inline
fn move(reg u32 x) -> reg u32 {
reg u32 y;
y = x;
return y;
}

export
fn test_inline(reg u32 a) -> reg u32 {
reg u32 b;
b = move(a);
return b;
}

export
fn primop_test(reg u8 x) -> reg u8 {
reg u8 a;
a = x;

a = #x86_ADD_8(a, a);

return a;
}
